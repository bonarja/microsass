{"version":3,"sources":["components/lab.js","components/card.js","components/app.js","serviceWorker.js","index.js"],"names":["Lab","$css","React","createRef","$scss","state","is_convert","covert_show","_this","setState","update","el","css","window","microsass","convert","value","html","format","current","innerHTML","error","close_show_save","_this2","this","scss","CodeFlask","language","lineNumbers","onchange","e","target","load_example","_this3","fetch","method","then","response","text","data","updateCode","querySelector","react_default","a","createElement","className","ref","onChange","onKeyDown","concat","onClick","Component","Card","props","children","App","github","npm","card_Card","href","components_lab","Boolean","location","hostname","match","ReactDOM","render","components_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.958d9003.chunk.js","sourcesContent":["import React from 'react';\r\nimport './lab.scss';\r\nimport CodeFlask from 'codeflask';\r\nclass Lab extends React.Component {\r\n    $css = React.createRef();\r\n    $scss = React.createRef();\r\n    state = {\r\n        is_convert: true\r\n    }\r\n    componentDidMount() {\r\n        this.scss = new CodeFlask(this.$scss.current, {\r\n            language: 'css',\r\n            lineNumbers: true\r\n        });\r\n        this.$scss.current.onchange = (e) => this.update(e.target);\r\n        this.load_example();\r\n    }\r\n    covert_show = () => {\r\n        this.state.is_convert === true && this.setState({is_convert: false});\r\n    }\r\n    update = el =>{\r\n        this.state.is_convert === false && this.setState({is_convert: true});\r\n        try {\r\n            var css = window.microsass.convert(el.value, {html: true, format: true});   \r\n            this.$css.current.innerHTML = css; \r\n        } catch (error) {}\r\n    }\r\n    load_example() {\r\n        fetch(`./example.scss`, {\r\n            method: 'get',\r\n        }).then(response => response.text()).then(data => {\r\n            this.scss.updateCode(data);\r\n            this.update(this.$scss.current.querySelector(\"textarea\"));\r\n        });\r\n    }\r\n    close_show_save =() => {\r\n        this.state.is_convert === false && this.setState({is_convert: true});\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Lab cover\">\r\n                <div className=\"sections cover center\">\r\n                    <div className=\"section\">\r\n                        <div className=\"header center\">SCSS</div>\r\n                        <div \r\n                            className=\"cover scss\" \r\n                            ref={this.$scss} \r\n                            onChange={this.update}  \r\n                            onKeyDown={this.covert_show}\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"section css\">\r\n                        <div className=\"header center\">CSS</div>\r\n                        <div \r\n                            className={`css cover ${this.state.is_convert === false && 'show_save'}`} \r\n                            ref={this.$css}\r\n                            onClick={this.close_show_save}\r\n                        ></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Lab;","import React from 'react';\r\nimport './card.scss';\r\n\r\nexport default class Card extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\nimport \"./app.main.scss\";\nimport \"./app.scss\";\nimport Lab from \"./lab\";\nimport Card from \"./card\";\n\nfunction App() {\n    const title = \"microsass\";\n    const github = \"https://github.com/bonarja/microsass\";\n    const npm = \"https://www.npmjs.com/package/microsass\";\n\n    return (\n        <div className=\"App cover center y\">\n            <Card>\n                <h1 className=\"title\">{title}</h1>\n                <p>\n                    Microsass is a script that can convert the basic structures\n                    of <b>SCSS</b> into <b>CSS</b> directly in the browser.\n                </p>\n                <p>\n                    Microsass can process the staggered selectors of <b>SCSS</b>\n                    , and supports the declaration and use of basic variables,\n                    as well as the basic arithmetic processing of variables.\n                </p>\n                <p>\n                    It also interprets the properties to add the -webkit, -moz-,\n                    -o and -ms required.\n                </p>\n                <div className=\"links\">\n                    <h2 className=\"title\"> Doc </h2>\n                    <p>\n                        <b>Github:</b>\n                        <a href={github}>{github}</a>\n                    </p>\n                    <p>\n                        <b>Npm:</b>\n                        <a href={npm}>{npm}</a>\n                    </p>\n                </div>\n                <h1 className=\"\" />\n            </Card>\n            <Lab />\n        </div>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}